<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://weiyou2012.github.io</id>
    <title>Wei You</title>
    <updated>2020-12-29T16:02:00.743Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://weiyou2012.github.io"/>
    <link rel="self" href="https://weiyou2012.github.io/atom.xml"/>
    <subtitle>总有以后需要翻阅的记录</subtitle>
    <logo>https://weiyou2012.github.io/images/avatar.png</logo>
    <icon>https://weiyou2012.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Wei You</rights>
    <entry>
        <title type="html"><![CDATA[ Xcode 中的 Swift 代码注释]]></title>
        <id>https://weiyou2012.github.io/post/xcode-zhong-de-swift-dai-ma-zhu-shi/</id>
        <link href="https://weiyou2012.github.io/post/xcode-zhong-de-swift-dai-ma-zhu-shi/">
        </link>
        <updated>2020-12-29T13:53:56.000Z</updated>
        <summary type="html"><![CDATA[<p>写代码也有一段时间了，代码中注释也是写了不老少，但在和同事一起开发的时候才发现了问题，大家注释的样子各成一体，没有能写出苹果官方注释的样子。大概就是注释的语法上出了问题，于是自己就主动学习了下 Swift代码的注释语法格式，记录下自己学到的东西。</p>
]]></summary>
        <content type="html"><![CDATA[<p>写代码也有一段时间了，代码中注释也是写了不老少，但在和同事一起开发的时候才发现了问题，大家注释的样子各成一体，没有能写出苹果官方注释的样子。大概就是注释的语法上出了问题，于是自己就主动学习了下 Swift代码的注释语法格式，记录下自己学到的东西。</p>
<!-- more -->
<h2 id="注释语法">注释语法</h2>
<h3 id="单行注释">单行注释</h3>
<pre><code class="language-swift">// 单行注释
</code></pre>
<ul>
<li>单行注释主要出现在.swfit 文件的顶部，记录代码文件的一些信息。</li>
<li>另外也出现在代码中，用于记录对于单行代码的解释。</li>
</ul>
<h3 id="单行文档注释">单行文档注释</h3>
<pre><code class="language-swift">/// 单行文档注释
</code></pre>
<p>当我们用 ⌥ + 鼠标左键，点击代码时，可以查看属性或者方法的文档页面，更直观的查看代码的文档说明。</p>
<p>多数时候，我们都在使用这个方法注释类，结构体、枚举，属性，方法</p>
<h3 id="多行注释">多行注释</h3>
<pre><code class="language-swift">/*
	第一行注释
	第二行注释
	第三行注释
*/
</code></pre>
<p>在代码中，如果连续很多个单行注释，可换成多行注释，避免写很多单行注释，造成多余代码。</p>
<h3 id="多行文档注释">多行文档注释</h3>
<pre><code class="language-swift">/**
	多行文档注释
*/
</code></pre>
<p>可以在多行文档注释中加入一些MD语法，就可以达到文档页面的特殊样式。</p>
<h2 id="注释中的标记语法">注释中的标记语法</h2>
<p>在 Xcode中写 Swift代码程序注释，本身就有其支持的 MarKDown 语法。还有一些特殊的标记，可以在右边mini 代码预览中展示，也可以在最上边的文件路径层次里查看。</p>
<h3 id="标记">标记</h3>
<pre><code class="language-swift">// MARK: 这个是标示
// MARK: - 这个是带分割线的标示
</code></pre>
<p>用于标记代码结构，而且在Xcode 中右边mini map 中可以看到</p>
<pre><code class="language-swift">// TODO: 这个下边要写一些代码，实现某个目的。
// TODO: - 多了一条分割线。
</code></pre>
<p>这个用来提示下一步编写代码的目的或者实现逻辑。</p>
<pre><code class="language-swift">// FIXME: 这个地方要修理一下。
</code></pre>
<p>提示这个地方的代码需要修复，存在某种需要修复问题。</p>
<h3 id="文档注释">文档注释</h3>
<p>在开发中，我们可以用 快捷键<code>⌥ + ⌘ + /</code> ，来为代码生成文档注释<code>///</code>。</p>
<p>其中 <code>- Parameters:</code>写法，还有<code>- Throws:</code>，<code>- Returns:</code>写法，都是特殊的关键字符格式，会在文档注释的页面特别显示。</p>
<pre><code class="language-swift">/// 两个整数相加
/// - Parameters:
///   - a: 加号左边的整数
///   - b: 加号右边的整数
/// - Throws: 抛出错误，此方法不抛出错误，只为另外演示注释用法。
/// - Returns: 和
///
/// 这个是一个两个整数的相加方法，用于求两个整数的和。
func add(a: Int, b: Int) throws -&gt; Int {
    return a + b
}
</code></pre>
<p>可以在下图中的看到生成的文档样式，那些关键字起到一些标题的作用，让文档更清晰明了。而且是 Xcode 根据注释语法，自动生成的文档说明。</p>
<figure data-type="image" tabindex="1"><img src="https://weiyou2012.github.io/post-images/1609250290493.png" alt="" loading="lazy"></figure>
<p>另外，在多行文档注释中，还可以使用 MarkDown语法进行书写。还有一些其他的关键字，也可在注释文档中使用。可参照下边代码，或者自行学习MarkDown语法。</p>
<pre><code class="language-swift">    /**
        两个整数相加
        # 加法（标题一）
        这个方法执行整数的加法运算。
        ## 加法运算（标题二）
        想加个试试看
     
        中间隔着一个横线
        ***
     
		代码块的*使用*方法:
		```
            let num = func add(a: 1, b: 2)
            // print 3
        ```
            
        - c: 参数一
        - d: 参数二
        - f: 参数三
     
        - Parameters:
            - a: 加号左边的整数
            - b: 加号右边的整数
        - Throws: 抛出错误，此方法不抛出错误，只为另外演示注释用法。
        - Returns: 和
     
        - Important: 注意这个方法的参数。
        - Version: 1.0.0
        - Authors: Wei You, Fang Wang
        - Copyright: 版权所有
        - Date: 2020-12-28
        - Since: 1949-10-01
        - Attention: 加法的运算
        - Note: 提示一下，用的时候请注意类型。
        - Remark: 从新标记一下这个方法。
        - Warning: 警告，这是一个没有内容的警告。
        - Bug: 标记下bug问题。
        - TODO: 要点改进的代码
        - Experiment: 试验点新玩法。
        - Precondition: 使用方法的前置条件
        - Postcondition：使用方法的后置条件
        - Requires: 要求一些东西，才能用这个方法。
        - Invariant: 不变的
     */
    func add(a: Int, b: Int) throws -&gt; Int {
        return a + b
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Swift 代码格式化工具 ]]></title>
        <id>https://weiyou2012.github.io/post/swift-dai-ma-ge-shi-hua-gong-ju/</id>
        <link href="https://weiyou2012.github.io/post/swift-dai-ma-ge-shi-hua-gong-ju/">
        </link>
        <updated>2020-12-19T13:40:49.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a></p>
<p>A command-line tool and Xcode Extension for formatting Swift code</p>
<p>用于格式化 Swift代码的一个命令行工具和 Xcode扩展。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a></p>
<p>A command-line tool and Xcode Extension for formatting Swift code</p>
<p>用于格式化 Swift代码的一个命令行工具和 Xcode扩展。</p>
</blockquote>
<!-- more -->
<h2 id="引言">引言</h2>
<p>之前的工作中，一直都是自己在维护和开发公司的 iOS项目，对于代码格式没有强制要求，但本着严格自律的工作作风，自己在写代码的时候，都是遵守模仿了<a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">Swift官方手册</a>的代码风格。而且自己也已经习惯了阅读这种格式的代码。毕竟看着美观啊！</p>
<p>在更换了工作之后，现在的 iOS开发工作已经不是我一个人的战斗。于是问题来了。同事的项目代码并没有准守官方手册的代码风格，而且很多地方看起来就很不规范的样子。在这个方面，公司也没有做出个统一规范。这让我在看同事代码的时候就特别不舒服，有时甚至去主动修改同事的代码格式。如果真的手动去更改整个项目的代码格式风格，显然不现实。于是就萌发了找一个简单易通的 Swift代码格式工具的想法...</p>
<p>最后找个了 <strong>SwiftFormat</strong>。</p>
<p>这次主要记录 Xcode Extension 的安装和设置，使用很简单，可直观较快的解决代码格式问题。</p>
<h2 id="安装与设置">安装与设置</h2>
<p>SwiftFormat 用于 Xcode扩展的工具，是一个名叫 SwiftFormat for Xcode.app。</p>
<figure data-type="image" tabindex="1"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a9e4491441249539fc540ba6bf239c1~tplv-k3u1fbpfcp-watermark.image" alt="" loading="lazy"></figure>
<p>我们直接在页面选择最新发布版本的 <strong>SwiftFormat.for.Xcode.app.zip</strong>下载，<a href="https://github.com/nicklockwood/SwiftFormat/releases">下载地址</a>。</p>
<figure data-type="image" tabindex="2"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/792514b1eb034b368af17987c0b2e4d5~tplv-k3u1fbpfcp-watermark.image" alt="" loading="lazy"></figure>
<p>下载完成解压，获得 app。<br>
并将 app 拖入到左边的应用程序，点击运行。<br>
安全提示可以忽略，直接打开。</p>
<figure data-type="image" tabindex="3"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/458d3195bec04f0bbf9bcb076b4b9c75~tplv-k3u1fbpfcp-watermark.image" alt="" loading="lazy"></figure>
<p>右上角可选择 Swift语言的版本，默认为自动，可选为自己项目使用的语言版本。</p>
<p>Swift 代码格式的规则为列表中打勾的选项，可不作调整，自行研究每个选的的作用，目前还没有汉化。</p>
<figure data-type="image" tabindex="4"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33280210b4ab47108be623d32e8e6bc7~tplv-k3u1fbpfcp-watermark.image" alt="" loading="lazy"></figure>
<p>然后在 <strong>系统偏好设置</strong>中，找到<strong>扩展</strong>，勾选 SwiftFormat.for.Xcode 下的选择框，继续查看 Xcode Source Editor 里的选项是否打勾，打勾后就完成了安装设置工作。🎉</p>
<h2 id="使用">使用</h2>
<p>SwiftFormat 使用很简单，会在 <strong>Editor</strong> 菜单下增加一个 <strong>SwiftFormat</strong> 的选项。</p>
<figure data-type="image" tabindex="5"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95ba647788b44d049509705bc9d135fd~tplv-k3u1fbpfcp-watermark.image" alt="" loading="lazy"></figure>
<ul>
<li>Format Selection 处理选中的代码</li>
<li>Format File 处理当前文件</li>
</ul>
<p>到这里，SwiftFormat的Xcode扩展工具，安装使用就已经介绍完毕，需要的小伙伴可以上手试一试啦。🎉</p>
<h2 id="结尾">结尾</h2>
<p>目前介绍的是 SwiftFormat界面化的 Xcode扩展，功能直接，能快速处理 Swfit代码格式，另外app 中也提供一些格式化规则的选项，用于自定义化代码格式化。</p>
<p>使用之后，感觉几乎没有什么学习成本，便于大家的代码格式统一化。</p>
<p>最后，如果对命令感兴趣的话，可以了解其命令行工具的使用，可在<a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat的主页</a> 查看介绍。</p>
]]></content>
    </entry>
</feed>